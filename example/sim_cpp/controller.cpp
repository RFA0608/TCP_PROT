#include <iostream>
#include <string>
#include "../../cpp/tcp_protocol_client.h"
using namespace std;

const string host = "127.0.0.1";
const int port = 9999;

const double F[4][4] = {{-0.536627792820633, -0.0616616464699388, 0.00866858350768544, -0.00463375401067145},
                        {0.00500554483113348, -0.601557630748387, 0.00362678875646218, 0.000421412722115318},
                        {-114.091783546364, -22.4291804036030, 2.46787179162606, -1.85343312684920},
                        {4.67284205745743, -140.995944698502, 1.45149348677951, -0.831327144074360}};

const double G[4][2] = {{1.55270125254271, 0.0119013552498322},
                        {0.0108847973351295, 1.55379044548734},
                        {120.523088182329, 2.51929505177743},
                        {1.68670345396683, 121.878828984762}};

const double H[1][4] = {{25.8509647864634, -83.0321122531947, 5.90039644952970, -7.45747542479626}};

double x[4][1] = {{0},
                  {0},
                  {0},
                  {0}};
    
double temp_x[4][1] = {{0},
                       {0},
                       {0},
                       {0}};

double u[1][1] = {{0}};

double y[2][1] = {{0},
                  {0}};

int main()
{
    tcp_client tccp = tcp_client(host, port);

    int max_iter = 300;

    for(int i = 0; i < max_iter; i++)
    {
        for(int j = 0; j < 4; j++)
        {
            if(j == 0)
            {
                u[0][0] = H[0][0] * x[0][0];
            }
            else
            {
                u[0][0] += H[0][j] * x[j][0];
            }
        }

        tccp.Send<double>(u[0][0]);
        
        y[0][0] = tccp.Recv<double>();
        y[1][0] = tccp.Recv<double>();

        for(int j = 0; j < 4; j++)
        {
            if(j == 0)
            {
                temp_x[0][0] = F[0][0] * x[0][0] + F[0][1] * x[1][0] + F[0][2] * x[2][0] + F[0][3] * x[3][0] + G[0][0] * y[0][0] + G[0][1] * y[1][0];
            }
            else
            {
                temp_x[j][0] = F[j][0] * x[0][0] + F[j][1] * x[1][0] + F[j][2] * x[2][0] + F[j][3] * x[3][0] + G[j][0] * y[0][0] + G[j][1] * y[1][0];
            }
        }

        for(int j = 0; j < 4; j++)
        {
            x[j][0] = temp_x[j][0];
        }
    }
}
